@page "/login"
@using Hospital.UI.Services
@using System.ComponentModel.DataAnnotations  <!-- Add this using directive -->
@inject AuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@rendermode InteractiveServer

<style>
    .login-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    h3 {
        text-align: center;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        width: 100%;
        padding: 12px;
        background-color: cornflowerblue; 
        color: white;
        font-size: 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-primary:hover {
            background-color: darkblue;
            transform: scale(1.05); 
        }

    .signup-link {
        text-align: center;
        margin-top: 15px;
    }

    .error-message {
        color: red;
        text-align: center;
        margin-top: 10px;
    }
</style>



<div class="login-container">
    <h3>Login</h3>
    <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Email:</label>
            <InputText type="email" class="form-control" @bind-Value="loginModel.Email" />
        </div>

        <div class="form-group">
            <label>Password:</label>
            <InputText type="password" class="form-control" @bind-Value="loginModel.Password" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>

        <div class="signup-link">
            <p>Don't have an account? <a href="/">Sign up here</a></p>
        </div>

        @if (loginFailed)
        {
            <div class="error-message">Invalid email or password. Please try again.</div>
        }
    </EditForm>
</div>

@code {
    private LoginModel loginModel = new();
    private bool loginFailed = false;

    private async Task HandleValidSubmit()
    {
        loginFailed = false;

        bool isAuthenticated = await AuthService.LoginUserAsync(loginModel.Email, loginModel.Password);

        if (isAuthenticated)
        {
            // Store email in localStorage
            await JsRuntime.InvokeVoidAsync("localStorage.setItem", "loggedInUser", loginModel.Email);

            // Redirect based on user type
            if (await AuthService.IsDoctorAsync(loginModel.Email))
            {
                NavigationManager.NavigateTo("/record");
            }
            else
            {
                NavigationManager.NavigateTo("/patient");
            }
        }
        else
        {
            loginFailed = true;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; }
    }
}