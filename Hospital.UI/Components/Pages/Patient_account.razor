@page "/patient"
@rendermode InteractiveServer
@inject NavigationManager NavManager
@using Hospital.Data.DAO
@using Hospital.Data.Entities
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JsRuntime


<PageTitle>Patient Account</PageTitle>

<style>
   

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        background-color: #007bff;
        color: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

        .header h1 {
            margin: 0;
            font-size: 1.5rem;
        }

    .logout-button {
        background-color: #ff5252 !important;
        border-color: #ff5252 !important;
        font-size: 0.9rem;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
    }

        .logout-button:hover {
            background-color: #e53935 !important;
        }

    .content {
        max-width: 800px;
        margin: 30px auto;
        padding: 20px;
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

        .content h3 {
            margin-bottom: 20px;
            color: #007bff;
        }

    .appointment-form {
        margin-top: 20px;
        padding: 20px;
        background: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }

        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

            .form-group input:focus {
                border-color: #007bff;
                box-shadow: 0 0 8px rgba(0, 123, 255, 0.5);
                outline: none;
            }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .toggle-btn {
        margin: 20px 0;
        font-size: 1rem;
        color: white;
        background-color: #007bff;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
    }

        .toggle-btn:hover {
            background-color: #0056b3;
        }
</style>

<div class="header">
    <h1>Welcome to your Patient Dashboard!</h1>
    <RadzenButton Text="Log Out" ButtonStyle="ButtonStyle.Primary" Click="LogOut" Class="logout-button" />
</div>

<div class="content">
    @if (IsDataLoaded)

    {
        <div>
            <p><strong>Name:</strong> @UserName</p>
            <p><strong>Surname:</strong> @UserSurname</p>
            <p><strong>Email:</strong> @LoggedInUser</p>
        </div>

        @if (LastAddedPatient != null)

        {
            <div style="margin-top: 20px; border-top: 1px solid #ccc; padding-top: 20px;">
                <h3>Appointment Details</h3>
                <p><strong>Appointment Date:</strong> @LastAddedPatient.VisitDate.ToString("g")</p>

                @if (LastDiagnosisRecord != null)

                {
                    <p><strong>Diagnosis:</strong> @LastDiagnosisRecord.Diagnosis</p>
                    <p><strong>Medicine:</strong> @LastDiagnosisRecord.Medicine</p>
                }

                else

                {
                    <p>No diagnosis record available.</p>
                }
            </div>
        }
    }

    else

    {
        <p>Loading your account data...</p>
    }

    <button class="toggle-btn" @onclick="ToggleForm">
        @if (IsFormVisible)

        {
            <text>Close Form</text>
        }

        else

        {
            <text>Book an Appointment</text>
        }
    </button>

    @if (IsFormVisible)

    {
        <div class="appointment-form">
            <h3>Book an Appointment</h3>
            <form>
                <div class="form-group">
                    <label for="name">Name:</label>
                    <input type="text" name="name" required placeholder="Enter your name" id="name" @bind-value="newPatient.Name" />
                </div>

                <div class="form-group">
                    <label for="surname">Surname:</label>
                    <input type="text" name="surname" required placeholder="Enter your surname" id="surname" @bind-value="newPatient.Surname" />
                </div>

                <div class="form-group">
                    <label for="dob">Date of Birth:</label>
                    <input type="date" name="dob" required id="dob" @bind-value="newPatient.DOB" />
                </div>

                <div class="form-group">
                    <label for="phone">Phone:</label>
                    <input type="text" name="phone" placeholder="Enter your phone number" id="phone" @bind-value="newPatient.Phone" />
                </div>

                <div class="form-group">
                    <label for="visit_date">Visit Date:</label>
                    <input type="datetime-local" name="visit_date" required id="visit_date" @bind-value="newPatient.VisitDate" />
                </div>

                <RadzenButton Click="AddDatabase" Text="Book Appointment" ButtonStyle="ButtonStyle.Primary" />
            </form>
        </div>
    }
</div>


@code {

    [Inject]
    public ApplicationDBContext context { get; set; }

    private Patient newPatient { get; set; } = new();
    private Patient LastAddedPatient { get; set; } = null;
    private DiagnosisRecord LastDiagnosisRecord { get; set; } = null;

    private string LoggedInUser { get; set; } = string.Empty;
    private string UserName { get; set; } = string.Empty;
    private string UserSurname { get; set; } = string.Empty;
    private bool IsDataLoaded { get; set; } = false;

    private bool IsFormVisible { get; set; } = false;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoggedInUser = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "loggedInUser");

            if (!string.IsNullOrEmpty(LoggedInUser))
            {
                var user = await context.Users.FirstOrDefaultAsync(u => u.Email == LoggedInUser);

                if (user != null)
                {
                    UserName = user.Name;
                    UserSurname = user.Surname;

                    LastAddedPatient = await context.Patients
                        .Where(p => p.UserId == user.Id)
                        .OrderByDescending(p => p.VisitDate)
                        .FirstOrDefaultAsync();

                    if (LastAddedPatient != null)
                    {
                        LastDiagnosisRecord = await context.DiagnosisRecords
                            .FirstOrDefaultAsync(d => d.PatientID == LastAddedPatient.ID);
                    }
                }
            }

            IsDataLoaded = true;
            StateHasChanged();
        }
    }

    private async Task LogOut()
    {
        await JsRuntime.InvokeVoidAsync("localStorage.removeItem", "loggedInUser");
        NavManager.NavigateTo("/login");
    }

    private async void AddDatabase()
    {
        var user = await context.Users.FirstOrDefaultAsync(u => u.Email == LoggedInUser);

        if (user != null)
        {
            newPatient.UserId = user.Id;

            await context.Patients.AddAsync(newPatient);
            await context.SaveChangesAsync();

            LastAddedPatient = new Patient
                {
                    Name = newPatient.Name,
                    Surname = newPatient.Surname,
                    DOB = newPatient.DOB,
                    VisitDate = newPatient.VisitDate
                };

            LastDiagnosisRecord = await context.DiagnosisRecords
                .FirstOrDefaultAsync(d => d.PatientID == newPatient.ID);

            newPatient = new(); // Reset form
            StateHasChanged();

            await JsRuntime.InvokeVoidAsync("alert", "Appointment booked successfully!");
        }
    }







    private void ToggleForm()

    {

        IsFormVisible = !IsFormVisible;

    }
}